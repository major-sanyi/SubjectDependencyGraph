@using SubjectDependencyGraph.Blazor.Services
@using SubjectDependencyGraph.Shared.Models
@using System.Text
@inject IBlazorPageMemoryService pageMemory

<MudTable Items="@equalTable?.Subjects" Filter="new Func<KeyValuePair<Subject, HashSet<Subject>>,bool>(FilterFunc)">
    <ToolBarContent>
        <MudSwitch @bind-Value='ShowOnlyFinished'>Show Only Finished</MudSwitch>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Required Subject(s)</MudTh>
        <MudTh>Required Subject's Credit</MudTh>
        <MudTh>Wanted Subject</MudTh>
        <MudTh>Wanted Subject's Credit</MudTh>
        <MudTh>Finished</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Required Subject(s)">
            <MudStack>
                @foreach (var item in context.Value)
                {
                    <MudText>@item.ToString()</MudText>
                }
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Required Subject's Credit">
            <MudStack>
                @foreach (var item in context.Value)
                {
                    <MudText>@item.Kredit</MudText>
                }
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Wanted Subject">@context.Key.ToString()</MudTd>
            <MudTd DataLabel="Wanted Subject's Credit">@context.Key.Kredit</MudTd>

            <MudTd DataLabel="Finished">
                @{
                var FinishedIcon = getFinishedIcon(context.Value);
            }
            <MudIcon Icon="@FinishedIcon.icon" Color="FinishedIcon.color"></MudIcon>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    [Parameter]
    public EqualTable? equalTable { get; set; }

    private bool? _showOnlyFinished;
    protected bool? ShowOnlyFinished
    {
        get => _showOnlyFinished;
        set
        {
            _showOnlyFinished = value;
            if (value is not null) { pageMemory.ShowOnlyFinishedSubjects = (bool)value; }
        }
    }

    protected override void OnInitialized()
    {
        _showOnlyFinished = pageMemory.ShowOnlyFinishedSubjects;
        base.OnInitialized();
    }
    private bool FilterFunc(KeyValuePair<Subject, HashSet<Subject>> subjects)
    {
        if (!ShowOnlyFinished ?? true)
            return true;
        else
        {
            return subjects.Value.Any(x => x.Finished);
        }
    }

    private (string icon, Color color) getFinishedIcon(HashSet<Subject> subjects)
    {
        if (subjects.Count(x => x.Finished) == subjects.Count)
            return (Icons.Material.Filled.CheckCircle, Color.Success);
        else if (subjects.Any(x => x.Finished))
        {
            return (Icons.Material.Filled.CheckCircleOutline, Color.Warning);
        }
        else
        {
            return (Icons.Material.Filled.Close, Color.Error);
        }
    }
}
